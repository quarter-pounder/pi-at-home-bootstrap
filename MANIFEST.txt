PI AT HOME BOOTSTRAP (WITH GITLAB)

SETUP PATHS:
├── Path A: SD → NVMe Migration (scripts/00-migrate-to-nvme.sh)
└── Path B: Fresh Flash from Laptop (scripts/00-flash-nvme.sh)

CORE SCRIPTS:
├── 00-preflight-check.sh     - Validate prerequisites before setup
├── 00-migrate-to-nvme.sh     - Migrate SD card to NVMe (Path A)
├── 00-flash-nvme.sh          - Flash NVMe from workstation (Path B)
├── 00-optimize-sd-card.sh    - Optimize system for SD card longevity
├── 01-post-boot-setup.sh     - System packages, temp monitoring
├── 02-security-hardening.sh  - SSH, fail2ban, firewall, auto-updates
├── 03-install-docker.sh      - Docker + Compose
├── 04-setup-gitlab.sh        - Deploy GitLab stack
├── 05-register-runner.sh     - Register CI/CD runner
├── 06-setup-monitoring.sh    - Deploy Prometheus + Grafana + Loki
├── 07-setup-cloudflare-tunnel.sh - Remote access via Cloudflare
├── 08-fix-gitlab-permissions.sh - Fix GitLab container permissions
├── 10-update-services.sh     - Update GitLab/monitoring/system
├── 11-benchmark.sh           - Performance testing
├── 12-network-diag.sh        - Network diagnostics
├── 13-scale-resources.sh     - Adjust GitLab workers/memory
├── 14-setup-lfs.sh           - Enable Git Large File Storage
├── 15-add-runner.sh          - Add additional CI/CD runners
├── 16-import-dashboards.sh   - Import Grafana dashboards
├── 17-setup-terraform.sh     - Deploy AWS cloud infrastructure
├── 18-setup-terraform-gcp.sh - Deploy GCP cloud infrastructure (recommended)
├── 19-setup-gitlab-mirror.sh - Setup GitLab Cloud mirroring
├── 21-health-check.sh        - System and service health
├── 22-setup-dr-automation.sh - Setup DR automation system
├── 23-setup-dr-webhook.sh    - Setup webhook-based DR automation
├── 24-setup-complete-dr.sh   - Complete DR setup
├── 25-setup-adblocker.sh     - Deploy Pi-hole ad blocker
└── 99-cleanup.sh             - Remove all services and data

AUTOMATION:
├── install.sh                - One-liner clone and setup
├── setup-all.sh              - Run scripts 01-03 in sequence
└── setup-services.sh         - Run scripts 04-06 in sequence

SERVICES DEPLOYED:
├── GitLab CE                 - Git repository + CI/CD
├── GitLab Runner             - Docker executor for pipelines
├── Container Registry        - Docker image storage
├── Prometheus                - Metrics collection
├── Alertmanager              - Alert routing and management
├── Grafana                   - Monitoring dashboards
├── Loki                      - Log aggregation
├── Alloy                     - Log collection agent
├── Node Exporter             - System metrics
├── cAdvisor                  - Container metrics
├── Pi-hole                   - DNS ad blocker
├── Unbound                   - Local DNS resolver
├── Cloudflare Tunnel         - Secure external access
├── Webhook Receiver          - Prometheus alert processing
├── GCP/AWS Storage           - Cloud backup storage
└── DR Automation             - Disaster recovery system

SECURITY:
├── UFW firewall (default deny)
├── fail2ban (SSH + GitLab)
├── SSH hardening (no password, no root)
├── Automatic security updates
├── Kernel hardening (sysctl)
└── No exposed ports

BACKUPS:
├── backup.sh                 - Manual/automated backup
├── restore.sh                - Restore from backup
├── setup-cron.sh             - Daily backup at 2 AM
└── S3 sync (optional)

CONFIGURATION:
├── env.example               - All environment variables
├── docker-daemon.json        - Log rotation
├── gitlab.rb.template        - GitLab config (Pi optimized)
├── prometheus.yml            - Scrape configs + alert rules
├── prometheus-alerts.yml     - System/GitLab/Docker/DR alerts
├── alertmanager.yml          - Alert routing and management
├── grafana-datasource.yml    - Prometheus + Loki datasources
├── grafana-dashboard-gitlab.json - GitLab metrics dashboard
├── grafana-dashboard-system.json - Pi system metrics dashboard
├── loki.yml                  - Loki log aggregation config
├── alloy.river               - Alloy log collection config
├── unbound.conf              - Local DNS resolver config
├── fail2ban configs          - Brute force protection
├── runner-config.toml.template - GitLab Runner settings
├── Cloud-init templates      - Initial OS setup (Path B)
└── terraform/                - Infrastructure as Code
    ├── main.tf               - Root Terraform config
    ├── variables.tf          - Input variables
    ├── outputs.tf            - Output values
    └── modules/              - Cloudflare + AWS modules

DOCUMENTATION:
├── README.md                 - Main documentation + quick reference
├── SETUP-PATH-A.md           - SD to NVMe migration guide
├── SETUP-PATH-B.md           - Fresh flash guide
├── SETUP-CHECKLIST.md        - Step-by-step checklist
├── MANIFEST.txt              - This file
├── FEATURES.md               - Feature overview
├── IMPROVEMENTS.md           - Future enhancements
└── examples/
    ├── README.md             - CI/CD template guide
    ├── gitlab-ci-docker.yml  - Docker build/push template
    ├── gitlab-ci-nodejs.yml  - Node.js project template
    └── gitlab-ci-python.yml  - Python project template

RESOURCE OPTIMIZATION:
- 2GB swap with low swappiness
- GitLab Puma: 2 workers, 2 threads
- GitLab Sidekiq: 10 concurrency
- PostgreSQL: 256MB shared buffers
- Docker log rotation: 10MB x 3 files
- Temperature monitoring every 5 minutes

READY TO USE:
- All scripts executable
- Both setup paths documented
- Security hardened by default
- Monitoring included
- Backup/restore ready
- Cloudflare Tunnel configured
- GitLab CI/CD ready
